"""autogenerated by genpy from asrl_sensor_msgs/Packet.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import asrl_sensor_msgs.msg

class Packet(genpy.Message):
  _md5sum = "1c0f9f8290390c9313fb27fb31c8e9bd"
  _type = "asrl_sensor_msgs/Packet"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """IpAddress source
uint16 sourcePort

uint64 seqNumber

IpAddress destination
uint16 destinationPort

uint8[] data
================================================================================
MSG: asrl_sensor_msgs/IpAddress
# The 4-byte IPv4 address
uint8[4] address
"""
  __slots__ = ['source','sourcePort','seqNumber','destination','destinationPort','data']
  _slot_types = ['asrl_sensor_msgs/IpAddress','uint16','uint64','asrl_sensor_msgs/IpAddress','uint16','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       source,sourcePort,seqNumber,destination,destinationPort,data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Packet, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.source is None:
        self.source = asrl_sensor_msgs.msg.IpAddress()
      if self.sourcePort is None:
        self.sourcePort = 0
      if self.seqNumber is None:
        self.seqNumber = 0
      if self.destination is None:
        self.destination = asrl_sensor_msgs.msg.IpAddress()
      if self.destinationPort is None:
        self.destinationPort = 0
      if self.data is None:
        self.data = ''
    else:
      self.source = asrl_sensor_msgs.msg.IpAddress()
      self.sourcePort = 0
      self.seqNumber = 0
      self.destination = asrl_sensor_msgs.msg.IpAddress()
      self.destinationPort = 0
      self.data = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.source.address
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      _x = self
      buff.write(_struct_HQ.pack(_x.sourcePort, _x.seqNumber))
      _x = self.destination.address
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      buff.write(_struct_H.pack(self.destinationPort))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.source is None:
        self.source = asrl_sensor_msgs.msg.IpAddress()
      if self.destination is None:
        self.destination = asrl_sensor_msgs.msg.IpAddress()
      end = 0
      start = end
      end += 4
      self.source.address = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.sourcePort, _x.seqNumber,) = _struct_HQ.unpack(str[start:end])
      start = end
      end += 4
      self.destination.address = str[start:end]
      start = end
      end += 2
      (self.destinationPort,) = _struct_H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data = str[start:end].decode('utf-8')
      else:
        self.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.source.address
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      _x = self
      buff.write(_struct_HQ.pack(_x.sourcePort, _x.seqNumber))
      _x = self.destination.address
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      buff.write(_struct_H.pack(self.destinationPort))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.source is None:
        self.source = asrl_sensor_msgs.msg.IpAddress()
      if self.destination is None:
        self.destination = asrl_sensor_msgs.msg.IpAddress()
      end = 0
      start = end
      end += 4
      self.source.address = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.sourcePort, _x.seqNumber,) = _struct_HQ.unpack(str[start:end])
      start = end
      end += 4
      self.destination.address = str[start:end]
      start = end
      end += 2
      (self.destinationPort,) = _struct_H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data = str[start:end].decode('utf-8')
      else:
        self.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_H = struct.Struct("<H")
_struct_HQ = struct.Struct("<HQ")
_struct_4B = struct.Struct("<4B")
_struct_4s = struct.Struct("<4s")
