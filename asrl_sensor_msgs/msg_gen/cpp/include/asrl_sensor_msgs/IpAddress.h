/* Auto-generated by genmsg_cpp for file /home/linaro/fearing_rosbuild_overlay/asrl_comms/asrl_sensor_msgs/msg/IpAddress.msg */
#ifndef ASRL_SENSOR_MSGS_MESSAGE_IPADDRESS_H
#define ASRL_SENSOR_MSGS_MESSAGE_IPADDRESS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace asrl_sensor_msgs
{
template <class ContainerAllocator>
struct IpAddress_ {
  typedef IpAddress_<ContainerAllocator> Type;

  IpAddress_()
  : address()
  {
    address.assign(0);
  }

  IpAddress_(const ContainerAllocator& _alloc)
  : address()
  {
    address.assign(0);
  }

  typedef boost::array<uint8_t, 4>  _address_type;
  boost::array<uint8_t, 4>  address;


  typedef boost::shared_ptr< ::asrl_sensor_msgs::IpAddress_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asrl_sensor_msgs::IpAddress_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct IpAddress
typedef  ::asrl_sensor_msgs::IpAddress_<std::allocator<void> > IpAddress;

typedef boost::shared_ptr< ::asrl_sensor_msgs::IpAddress> IpAddressPtr;
typedef boost::shared_ptr< ::asrl_sensor_msgs::IpAddress const> IpAddressConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::asrl_sensor_msgs::IpAddress_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::asrl_sensor_msgs::IpAddress_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace asrl_sensor_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::asrl_sensor_msgs::IpAddress_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::asrl_sensor_msgs::IpAddress_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::asrl_sensor_msgs::IpAddress_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6281877a17375bff719369033dbac45a";
  }

  static const char* value(const  ::asrl_sensor_msgs::IpAddress_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6281877a17375bffULL;
  static const uint64_t static_value2 = 0x719369033dbac45aULL;
};

template<class ContainerAllocator>
struct DataType< ::asrl_sensor_msgs::IpAddress_<ContainerAllocator> > {
  static const char* value() 
  {
    return "asrl_sensor_msgs/IpAddress";
  }

  static const char* value(const  ::asrl_sensor_msgs::IpAddress_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::asrl_sensor_msgs::IpAddress_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# The 4-byte IPv4 address\n\
uint8[4] address\n\
";
  }

  static const char* value(const  ::asrl_sensor_msgs::IpAddress_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::asrl_sensor_msgs::IpAddress_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::asrl_sensor_msgs::IpAddress_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.address);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IpAddress_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asrl_sensor_msgs::IpAddress_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::asrl_sensor_msgs::IpAddress_<ContainerAllocator> & v) 
  {
    s << indent << "address[]" << std::endl;
    for (size_t i = 0; i < v.address.size(); ++i)
    {
      s << indent << "  address[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.address[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ASRL_SENSOR_MSGS_MESSAGE_IPADDRESS_H

