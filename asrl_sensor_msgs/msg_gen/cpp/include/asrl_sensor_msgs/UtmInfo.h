/* Auto-generated by genmsg_cpp for file /home/linaro/fearing_rosbuild_overlay/asrl_comms/asrl_sensor_msgs/msg/UtmInfo.msg */
#ifndef ASRL_SENSOR_MSGS_MESSAGE_UTMINFO_H
#define ASRL_SENSOR_MSGS_MESSAGE_UTMINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace asrl_sensor_msgs
{
template <class ContainerAllocator>
struct UtmInfo_ {
  typedef UtmInfo_<ContainerAllocator> Type;

  UtmInfo_()
  : header()
  , utcTime()
  , east(0.0)
  , north(0.0)
  , ellipsoidAlt(0.0)
  , geoidalSep(0.0)
  , utmZone()
  {
  }

  UtmInfo_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , utcTime()
  , east(0.0)
  , north(0.0)
  , ellipsoidAlt(0.0)
  , geoidalSep(0.0)
  , utmZone(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef ros::Time _utcTime_type;
  ros::Time utcTime;

  typedef float _east_type;
  float east;

  typedef float _north_type;
  float north;

  typedef float _ellipsoidAlt_type;
  float ellipsoidAlt;

  typedef float _geoidalSep_type;
  float geoidalSep;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _utmZone_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  utmZone;


  typedef boost::shared_ptr< ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct UtmInfo
typedef  ::asrl_sensor_msgs::UtmInfo_<std::allocator<void> > UtmInfo;

typedef boost::shared_ptr< ::asrl_sensor_msgs::UtmInfo> UtmInfoPtr;
typedef boost::shared_ptr< ::asrl_sensor_msgs::UtmInfo const> UtmInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace asrl_sensor_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "550966b909dbba458bf9a2e5b7766ced";
  }

  static const char* value(const  ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x550966b909dbba45ULL;
  static const uint64_t static_value2 = 0x8bf9a2e5b7766cedULL;
};

template<class ContainerAllocator>
struct DataType< ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "asrl_sensor_msgs/UtmInfo";
  }

  static const char* value(const  ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
# Utc time given in Utm message\n\
time utcTime\n\
\n\
# Utm position\n\
float32 east\n\
float32 north\n\
\n\
# Utm altitude info\n\
float32 ellipsoidAlt\n\
float32 geoidalSep\n\
\n\
# Utm zone\n\
string utmZone\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.utcTime);
    stream.next(m.east);
    stream.next(m.north);
    stream.next(m.ellipsoidAlt);
    stream.next(m.geoidalSep);
    stream.next(m.utmZone);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct UtmInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::asrl_sensor_msgs::UtmInfo_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "utcTime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.utcTime);
    s << indent << "east: ";
    Printer<float>::stream(s, indent + "  ", v.east);
    s << indent << "north: ";
    Printer<float>::stream(s, indent + "  ", v.north);
    s << indent << "ellipsoidAlt: ";
    Printer<float>::stream(s, indent + "  ", v.ellipsoidAlt);
    s << indent << "geoidalSep: ";
    Printer<float>::stream(s, indent + "  ", v.geoidalSep);
    s << indent << "utmZone: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.utmZone);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ASRL_SENSOR_MSGS_MESSAGE_UTMINFO_H

