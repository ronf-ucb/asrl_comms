/* Auto-generated by genmsg_cpp for file /home/linaro/fearing_rosbuild_overlay/asrl_comms/asrl_sensor_msgs/msg/GgaInfo.msg */
#ifndef ASRL_SENSOR_MSGS_MESSAGE_GGAINFO_H
#define ASRL_SENSOR_MSGS_MESSAGE_GGAINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace asrl_sensor_msgs
{
template <class ContainerAllocator>
struct GgaInfo_ {
  typedef GgaInfo_<ContainerAllocator> Type;

  GgaInfo_()
  : header()
  , utcTime()
  , latitude(0.0)
  , latCoordinate()
  , longitude(0.0)
  , longCoordinate()
  , geoidAlt(0.0)
  , rtkCode(0)
  {
  }

  GgaInfo_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , utcTime()
  , latitude(0.0)
  , latCoordinate(_alloc)
  , longitude(0.0)
  , longCoordinate(_alloc)
  , geoidAlt(0.0)
  , rtkCode(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef ros::Time _utcTime_type;
  ros::Time utcTime;

  typedef float _latitude_type;
  float latitude;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _latCoordinate_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  latCoordinate;

  typedef float _longitude_type;
  float longitude;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _longCoordinate_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  longCoordinate;

  typedef float _geoidAlt_type;
  float geoidAlt;

  typedef uint8_t _rtkCode_type;
  uint8_t rtkCode;


  typedef boost::shared_ptr< ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GgaInfo
typedef  ::asrl_sensor_msgs::GgaInfo_<std::allocator<void> > GgaInfo;

typedef boost::shared_ptr< ::asrl_sensor_msgs::GgaInfo> GgaInfoPtr;
typedef boost::shared_ptr< ::asrl_sensor_msgs::GgaInfo const> GgaInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace asrl_sensor_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "52c711feed09f0cce626b8ded662359f";
  }

  static const char* value(const  ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x52c711feed09f0ccULL;
  static const uint64_t static_value2 = 0xe626b8ded662359fULL;
};

template<class ContainerAllocator>
struct DataType< ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "asrl_sensor_msgs/GgaInfo";
  }

  static const char* value(const  ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
# Utc time\n\
time utcTime\n\
\n\
# Lattitude\n\
float32 latitude\n\
string latCoordinate\n\
\n\
# Longitude\n\
float32 longitude\n\
string longCoordinate\n\
\n\
# Geoidal Altitude (m)\n\
float32 geoidAlt\n\
\n\
# Rtk code: 1 is Stand Alone, 4 if fixed RTK, 5 is float RTK, invalid otherwise\n\
uint8 rtkCode\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.utcTime);
    stream.next(m.latitude);
    stream.next(m.latCoordinate);
    stream.next(m.longitude);
    stream.next(m.longCoordinate);
    stream.next(m.geoidAlt);
    stream.next(m.rtkCode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GgaInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::asrl_sensor_msgs::GgaInfo_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "utcTime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.utcTime);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "latCoordinate: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.latCoordinate);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "longCoordinate: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.longCoordinate);
    s << indent << "geoidAlt: ";
    Printer<float>::stream(s, indent + "  ", v.geoidAlt);
    s << indent << "rtkCode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rtkCode);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ASRL_SENSOR_MSGS_MESSAGE_GGAINFO_H

